<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.ComponentModel;
using System.Linq.Expressions;
<# if (UseAsync) { #>
using System.Threading.Tasks;
<# } #>
using System.Web.Mvc;
using Dos.ORM;
using MVCCMS.NET.Com;
using MVCCMS.NET.Model;
using MVCCMS.NET.Web.Controllers;

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }

	string boolType = "System.Boolean";
	string Int32Type = "System.Int32";
	string DateTimeType = "System.DateTime";
	string StringType = "System.String";

#>
	[Description("<#= ControllerName #>说明")]
    public class <#= ControllerName #> : Controller
    {
        private readonly Dal.<#= ControllerRootName #> _bll = new Dal.<#= ControllerRootName #>();

        #region 列表读取============================================================
		// GET: <#= routePrefix #>/Index
		[Description("列表")]
        public ActionResult Index()
        {
            var pageCurrent = RequestHelper.GetFormInt("pageCurrent" , 1);
            var pageSize = RequestHelper.GetFormInt("pageSize" , 30);
            int total;
            var where = new Where<<#= ControllerRootName #>>();
            //获取排序字段
            var orderField = RequestHelper.GetFormString("orderField");
            Expression<Func<<#= ControllerRootName #> , object>> orderEx;
            switch (orderField)
            {
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
#>
			case "<#= property.PropertyName #>":
                    orderEx = p => p.<#= property.PropertyName #>;
                    break;
<#
}
#>
                default:
                    orderEx = p => p.Id;
                    break;
            }
            //设置方式
            var orderDirection = RequestHelper.GetFormString("orderDirection");
            EnumHelper.OrderBy orderby = EnumHelper.OrderBy.Asc;
            if (orderDirection == "desc")
            {
                orderby = EnumHelper.OrderBy.Desc;
            }
            //查询筛选
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
#>

	<#
			if(property.TypeName.Equals(boolType)){
			#>
			var <#= property.PropertyName #> = RequestHelper.GetFormString("<#= property.PropertyName #>");
            if (!string.IsNullOrEmpty(<#= property.PropertyName #>) && <#= property.PropertyName #> == "true")
            {
                where.And(p => p.<#= property.PropertyName #> == true);
            }
            else if (!string.IsNullOrEmpty(<#= property.PropertyName #>) && <#= property.PropertyName #> == "false")
            {
                where.And(p => p.<#= property.PropertyName #> == false);
            }
			<#
			} else if(property.TypeName.Equals(Int32Type)){
			#>
			var <#= property.PropertyName #> = RequestHelper.GetFormInt("<#= property.PropertyName #>" , 0);
            if (<#= property.PropertyName #> > 0)
            {
                where.And(p=>p.<#= property.PropertyName #>==<#= property.PropertyName #>);
            }
			<#
			} else if(property.TypeName.Equals(DateTimeType)){
			#>
			var <#= property.PropertyName #> = RequestHelper.GetFormString("<#= property.PropertyName #>");
            if (!string.IsNullOrEmpty(<#= property.PropertyName #>))
            {
               var  dt<#= property.PropertyName #> = ToolsHelper.StrToDateTime(<#= property.PropertyName #>);
                where.And(p => p.AddTime > dt<#= property.PropertyName #>);
            }
			<#
			} else{
			#>
			var <#= property.PropertyName #> = RequestHelper.GetFormString("<#= property.PropertyName #>");
            if (!string.IsNullOrEmpty(<#= property.PropertyName #>))
            {
                where.And(p => p.<#= property.PropertyName #> == <#= property.PropertyName #>);
            }
			<#
			}
			#>
			ViewBag.<#= property.PropertyName #> = <#= property.PropertyName #>;	
<#
}
#>

            //获取数据
            var list = _bll.QueryPageList(pageCurrent , pageSize , out total , where , orderEx , orderby);

            //缓存数据
            ViewBag.pageCurrent = pageCurrent;
            ViewBag.pageSize = pageSize;
            ViewBag.total = total;
            
            ViewBag.orderDirection = orderDirection;
            ViewBag.orderField = orderField;

            return View(list);

        }
        #endregion

        #region 创建界面============================================================
		// GET: <#= routePrefix #>/Create
        [Description("创建")]
        public ActionResult Create()
        {
            //自定义内容
            return View();
        }

        #endregion

        #region 创建提交============================================================
		// POST: <#= routePrefix #>/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Description("创建提交")]
        public ActionResult Create(<#= ControllerRootName #> model)
        {
            var jm = new JsonWithUIcallback();
            try
            {

                if (ModelState.IsValid)
                {
                    //其他修改

                    var bl = _bll.Insert(model) > 0;
                    jm.statusCode = bl ? 200 : 300;
                    jm.message = (bl ? KeyWordsHelper.CreateSuccess : KeyWordsHelper.CreateFailure);
                    jm.closeCurrent = bl;
                    jm.tabid = bl ? "<#= ControllerRootName #>List" : "";
                }
                else
                {
                    jm.message = KeyWordsHelper.DataParameterError;
                }
            }
            catch (Exception ex)
            {
                ComToolsController.AddtxtLog(ex , "创建提交" , EnumHelper.Nlog.Error.ToString());
                jm.statusCode = 300;
                jm.message = ex.ToString();
                jm.closeCurrent = true;

            }
            return Json(jm);
        }
        #endregion

        #region 编辑展示============================================================
		// GET: <#= routePrefix #>/Edit
        [Description("编辑")]
        public ActionResult Edit(int id)
        {
            var jm = new JsonWithUIcallback();
            try
            {
                var model = _bll.QueryToEnetity(p => p.Id == id);
                if (model == null)
                {
                    jm.statusCode = 300;
                    jm.message = "不存在此信息";
                    jm.closeCurrent = true;
                    return Json(jm);
                }
                return View(model);
            }
            catch (Exception ex)
            {
                ComToolsController.AddtxtLog(ex , "编辑" , EnumHelper.Nlog.Error.ToString());
                jm.statusCode = 300;
                jm.message = ex.ToString();
                jm.closeCurrent = true;
            }
            return Json(jm);
        }

        #endregion

        #region 编辑提交============================================================
		// POST: <#= routePrefix #>/Edit
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Description("编辑提交")]
        public ActionResult Edit(<#= ControllerRootName #> model)
        {
            var jm = new JsonWithUIcallback();
            try
            {
                if (!ModelState.IsValid)
                {
                    jm.message = KeyWordsHelper.DataParameterError;
                    return Json(jm);
                }
                var oldModel = _bll.QueryToEnetity(p => p.Id == model.Id);
                if (oldModel == null)
                {
                    jm.statusCode = 300;
                    jm.message = "不存在此信息";
                    jm.closeCurrent = true;
                    return Json(jm);
                }
                //事物处理过程开始


                //事物处理过程结束
                var bl = _bll.Update(oldModel) > 0;
                jm.statusCode = bl ? 200 : 300;
                jm.message = bl ? KeyWordsHelper.EditSuccess : KeyWordsHelper.EditFailure;
                jm.closeCurrent = bl;
                jm.tabid = bl ? "<#= ControllerRootName #>List" : "";
            }
            catch (Exception ex)
            {
                ComToolsController.AddtxtLog(ex , "创建提交" , EnumHelper.Nlog.Error.ToString());
                jm.statusCode = 300;
                jm.message = ex.ToString();
                jm.closeCurrent = true;
            }
            return Json(jm);
        }
        #endregion

        #region 删除数据============================================================
		// POST: <#= routePrefix #>/Delete/10
        [HttpPost]
        [Description("删除")]
        public ActionResult Delete(int id)
        {
            var jm = new JsonWithUIcallback();
            try
            {
                var model = _bll.QueryToEnetity(p => p.Id == id);
                if (model == null)
                {
                    jm.message = KeyWordsHelper.DataisNo;
                }else if (model.Id==1)
                {
                    jm.message = "此项目禁止删除";
                }
                else
                {
                    var bl = _bll.Delete(model) > 0;
                    jm.statusCode = bl ? 200 : 300;
                    jm.message = bl ? KeyWordsHelper.DeleteSuccess : KeyWordsHelper.DeleteFailure;
					//jm.tabid = bl ? "<#= ControllerRootName #>List" : "";
                }
            }
            catch (Exception ex)
            {
                ComToolsController.AddtxtLog(ex , "删除" , EnumHelper.Nlog.Error.ToString());
                jm.message = KeyWordsHelper.DataHandleEx;
            }
            return Json(jm);
        }
		#endregion

        #region 批量删除============================================================
		// POST: <#= routePrefix #>/BatchDelete/10,11,20
        [HttpPost]
        [Description("批量删除")]
        public ActionResult BatchDelete(string delids)
        {
            var jm = new JsonWithUIcallback();
            try
            {
                if (string.IsNullOrEmpty(delids))
                {
                    jm.message = KeyWordsHelper.DataParameterError;
                }
                else
                {
                    var idintarr = ToolsHelper.StringToIntArray(delids);
                    var bl = _bll.Delete(p => p.Id.In(idintarr) && p.Id != 1) > 0;
                    jm.statusCode = bl ? 200 : 300;
                    jm.message = bl ? KeyWordsHelper.DeleteSuccess : KeyWordsHelper.DeleteFailure;
					jm.tabid = bl ? "<#= ControllerRootName #>List" : "";
                }
            }
            catch (Exception ex)
            {
                ComToolsController.AddtxtLog(ex , "批量删除" , EnumHelper.Nlog.Error.ToString());
                jm.message = KeyWordsHelper.DataHandleEx;
            }
            return Json(jm);
        }

        #endregion

        #region 预览数据============================================================
		// GET: <#= routePrefix #>/Details/10
        [Description("预览数据")]
        public ActionResult Details(int id)
        {
            var jm = new JsonWithUIcallback();
            try
            {
                var model = _bll.QueryToEnetity(p => p.Id == id);
                if (model == null)
                {
                    jm.statusCode = 300;
                    jm.message = "不存在此信息";
                    jm.closeCurrent = true;
                    return Json(jm);
                }
                return View(model);
            }
            catch (Exception ex)
            {
                ComToolsController.AddtxtLog(ex , "预览数据" , EnumHelper.Nlog.Error.ToString());
                jm.statusCode = 300;
                jm.message = ex.ToString();
                jm.closeCurrent = true;
            }
            return Json(jm);
        }
        #endregion

        #region 扩展方法============================================================

        #endregion
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>